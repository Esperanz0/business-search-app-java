/*
 * Copyright 2017 Vandolf Estrellado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Checks quality and style of Java code.
 *
 * Reference: http://vincentbrison.com/2014/07/19/how-to-improve-quality-and-syntax-of-your-android-code/
 */

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

ext.configDir = "$rootDir/config/quality"
ext.reportsDir = "$buildDir/reports"

// CHECK QUALITY TASK
check.dependsOn 'checkQuality'

class CheckQuality extends DefaultTask {}

task checkQuality(type: CheckQuality) {
    group = "Static Analysis"
    description = "Runs all static analysis checks on all build variants."
}

def checkQualityTaskForVariant(variant) {
    def buildVariant = variant.name.capitalize();
    def checkQualityVariant = "check${buildVariant}Quality";

    task(checkQualityVariant, type: CheckQuality,
            dependsOn: ['checkstyle', 'pmd', "lint${buildVariant}", "findbugs${buildVariant}"]) {
        group = "Static Analysis"
        description = "Runs all static analysis checks on the ${buildVariant} build."
    }

    checkQuality.dependsOn "${checkQualityVariant}"
}

// CHECKSTYLE
task checkstyle(type: Checkstyle) {
    group = "Static Analysis"
    description = "Checks style of source code"

    configFile file("$configDir/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/suppressions.xml").absolutePath
    configProperties.checkstyleJavaHeaderPath = file("$configDir/checkstyle/java.header").absolutePath
    configProperties.checkstyleXmlHeaderPath = file("$configDir/checkstyle/xml.header").absolutePath
    source 'src'
    include '**/*.java'
    include '**/*.xml'
    exclude '**/gen/**'
    classpath = files()
}

// FINDBUGS
task findbugs(type: FindBugs) {
    group = "Static Analysis"
    description = "Finds bugs in bytecode on all build variants."
}

def findbugsTaskForVariant(variant) {
    def buildVariant = variant.name.capitalize();
    def findBugsDependency = "assemble${buildVariant}";
    def findBugsVariant = "findbugs${buildVariant}";

    task("${findBugsVariant}", type: FindBugs, dependsOn: "${findBugsDependency}") {
        group = "Static Analysis"
        description = "Finds bugs in bytecode on the ${buildVariant} build."

        ignoreFailures = false
        effort = "max"
        reportLevel = "high"
        excludeFilter = new File("$configDir/findbugs/findbugs-filter.xml")
        classes = files("$buildDir/intermediates/classes")
        // TODO "${buildDir}/intermediates/classes/${flavor}/${buildType}"

        source 'src'
        include '**/*.java'
        exclude '**/gen/**'

        reports {
            xml.enabled = true
            html.enabled = false
            xml {
                destination "$reportsDir/findbugs/${buildVariant}/findbugs.xml"
            }
            html {
                destination "$reportsDir/findbugs/${buildVariant}/findbugs.html"
            }
        }

        classpath = files()
    }

    tasks.findbugs.dependsOn "${findBugsVariant}"
}

// PMD
task pmd(type: Pmd) {
    group = "Static Analysis"
    description = "Finds bugs in source code on all build variants"

    ignoreFailures = false
    ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$reportsDir/pmd/pmd.xml"
        }
        html {
            destination "$reportsDir/pmd/pmd.html"
        }
    }
}

ext {
    checkQualityTaskForVariant = this.&checkQualityTaskForVariant
    findbugsTaskForVariant = this.&findbugsTaskForVariant
}