/*
 * Copyright 2017 Vandolf Estrellado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Produces code coverage reports.
 *
 * Reference: https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.6.201602180812"
}

def excluded = [
        '**/di/*',
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewBinder*.*',
        '**/*_*MembersInjector*',
        '**/*_*Factory*',
        '**/Dagger*',
        '**/AutoParcel_*',
        '**/BuildConfig*',
        '**/Manifest*.*',
]

android.applicationVariants.all { variant ->
    def buildVariant = variant.name.capitalize();
    def jacocoTestReportDependency = "test${buildVariant}UnitTest";
    def jacocoVariant = "jacoco${buildVariant}TestReport";

    task(jacocoVariant, type: JacocoReport, dependsOn: "${jacocoTestReportDependency}") {
        group = "Code Coverage"
        description = "Generate Jacoco test reports for the ${buildVariant} build variant."

        def classesFlavorDir = "${buildDir}/intermediates/classes/${variant.flavorName}/${variant.buildType.name}";
        classDirectories = fileTree(
                dir: classesFlavorDir,
                excludes: excluded
        )

        def coverageSourceDirs = [
                "${projectDir}/src/main/java",
                "${projectDir}/src/${variant.flavorName}/java",
                "${projectDir}/src/${variant.buildType.name}/java",
                "${projectDir}/src/${buildVariant}/java",
        ]
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${buildDir}/jacoco/${jacocoTestReportDependency}.exec")

        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = true
            html {
                destination "${buildDir}/reports/jacoco/${buildVariant}/jacoco${buildVariant}TestReport.html"
            }
        }
    }
}