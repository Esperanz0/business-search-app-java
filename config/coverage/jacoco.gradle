/*
 * Copyright 2017 Vandolf Estrellado
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Generate code coverage reports.
 *
 * Reference: https://docs.gradle.org/current/userguide/jacoco_plugin.html
 */

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.6.201602180812"
}

def jacocoTaskFor(String flavor, String buildType, String buildVariant) {
    def jacocoTestReportDependency = !buildType.isEmpty() ? "test${buildVariant}UnitTest" : "test";
    def jacocoVariant = "jacoco${buildVariant.capitalize()}TestReport";

    task(jacocoVariant, type: JacocoReport, dependsOn: "${jacocoTestReportDependency}") {
        group = "Code Coverage"
        description = "Generate Jacoco test reports for the ${buildVariant} build variant."

        def classesDir;

        if (!buildType.isEmpty() && !flavor.isEmpty()) {
            classesDir = "${buildDir}/intermediates/classes/${flavor}/${buildType}"
        } else if (!buildType.isEmpty()) {
            classesDir = "${buildDir}/intermediates/classes/${buildType}"
        } else {
            classesDir = "${buildDir}/classes/${buildVariant}"
        }

        classDirectories = fileTree(
                dir: classesDir,
                excludes: [
                        '**/di/*',
                        '**/R.class',
                        '**/R$*.class',
                        '**/*$ViewBinder*.*',
                        '**/*_*MembersInjector*',
                        '**/*_*Factory*',
                        '**/Dagger*',
                        '**/AutoParcel_*',
                        '**/BuildConfig*',
                        '**/Manifest*.*',
                ]
        )

        def coverageSourceDirs = [
                "${projectDir}/src/main/java",
                "${projectDir}/src/${buildVariant}/java"
        ]

        if (!buildType.isEmpty()) {
            coverageSourceDirs += "${projectDir}/src/${buildType}/java";
            if (!flavor.isEmpty()) {
                coverageSourceDirs += "${projectDir}/src/${flavor}/java";
            }
        }

        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        executionData = files("${buildDir}/jacoco/${jacocoTestReportDependency}.exec")

        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = true
            html {
                destination "${buildDir}/reports/jacoco/${buildVariant}/jacoco${buildVariant.capitalize()}TestReport.html"
            }
        }
    }
}

def jacocoTaskForVariant(variant) {
    def flavor = variant.flavorName
    def buildType = variant.buildType.name
    def buildVariant = flavor.capitalize() + buildType.capitalize()
    jacocoTaskFor(flavor, buildType, buildVariant)
}

def jacocoTaskForBuildVariant(buildVariant) {
    jacocoTaskFor("", "", buildVariant)
}

ext {
    jacocoTaskForVariant = this.&jacocoTaskForVariant
    jacocoTaskForBuildVariant = this.&jacocoTaskForBuildVariant
}